# 工作流名称
name: GNews Telegram Bot Cron Job

# 触发器配置：只在计划时间和手动触发时运行
on:
  schedule:
    # 使用 Cron 表达式，表示“在每小时的第5分钟运行”
    # 您可以根据需求修改，例如 '*/30 * * * *' 代表每30分钟运行一次
    - cron: '5 * * * *'
  workflow_dispatch:
    # 这个选项允许您在 GitHub 仓库的 Actions 页面上手动点击按钮来触发运行，方便测试

# 权限配置：明确授予工作流读写仓库内容的权限
permissions:
  contents: write

# 任务定义
jobs:
  run-bot:
    # 运行环境：使用最新的 Ubuntu 虚拟机
    runs-on: ubuntu-latest

    # 步骤定义
    steps:
    # 第1步：检出（下载）您的仓库代码到虚拟机中
    - name: 1. Checkout repository
      uses: actions/checkout@v4

    # 第2步：设置 Python 环境
    - name: 2. Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # 指定使用 Python 3.9 版本

    # 第3步：安装所有 Python 依赖库
    - name: 3. Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 第4步：安装 Playwright 所需的浏览器内核及其系统依赖
    - name: 4. Install Playwright browsers
      run: playwright install --with-deps

    # 第5步：运行您的主 Python 脚本
    - name: 5. Run the bot script
      run: python gnews_bot_cn.py
      env:
        # 将您在仓库 Secrets 中设置的密钥作为环境变量注入到脚本中
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GNEWS_API_KEY: ${{ secrets.GNEWS_API_KEY }}

    # 第6步：提交并推送更新后的“已发送”记录文件
    - name: 6. Commit and push sent logs
      run: |
        # 配置 Git 的用户名和邮箱
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # ★★★ 关键修正：确保将两个记录文件都添加到暂存区 ★★★
        git add sent_articles.txt sent_titles.txt
        
        # 检查文件是否有变动，只有在文件内容改变时才执行提交和推送操作
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update sent articles and titles log" && git push)
